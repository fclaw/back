{
    "sourceFile": "src/core/Scaffold/Api/Controller/Controller.hs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1686322805978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1686322817774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+{-# OPTIONS_GHC -fno-warn-unused-top-binds #-}\n+{-# LANGUAGE OverloadedStrings #-}\n+{-# LANGUAGE AllowAmbiguousTypes #-}\n+{-# LANGUAGE ScopedTypeVariables #-}\n+{-# LANGUAGE TypeApplications #-}\n+{-# LANGUAGE DataKinds #-}\n+{-# LANGUAGE FlexibleContexts #-}\n+{-# LANGUAGE TemplateHaskell #-}\n+{-# LANGUAGE QuasiQuotes #-}\n+{-# LANGUAGE LambdaCase #-}\n+\n+module Scaffold.Api.Controller.Controller (controller) where\n+\n+import Scaffold.Api\n+-- controllers\n+import qualified Scaffold.Api.Controller.File.Upload as File.Upload\n+import qualified Scaffold.Api.Controller.File.Download as File.Download\n+import qualified Scaffold.Api.Controller.File.Delete as File.Delete\n+import qualified Scaffold.Api.Controller.File.Patch as File.Patch\n+import qualified Scaffold.Api.Controller.Frontend.Log as Frontend.Log\n+import qualified Scaffold.Api.Controller.SendGrid.SendMail as SendGrid.Send \n+import Servant.RawM.Server ()\n+import Scaffold.Auth\n+import Scaffold.Transport.Response\n+import Scaffold.Transport.Model.User (BasicAuth (..))\n+\n+import Data.Aeson\n+import Katip\n+import KatipController\n+import Servant.Server.Generic\n+import Servant.API.Generic\n+import Servant.Ip\n+import Control.Monad.Time\n+import BuildInfo\n+import Data.Functor\n+import Servant.Auth.Server (AuthResult (..), wwwAuthenticatedErr)\n+import Control.Monad.Except\n+import qualified Network.WebSockets.Connection as WS\n+import qualified Network.WebSockets as WS\n+import System.Info\n+import Data.Time.Clock.System (getSystemTime, systemSeconds)\n+import Data.Version (showVersion)\n+\n+\n+controller :: Api (AsServerT KatipController)\n+controller = Api { _apiHttp = toServant . httpApi  }\n+\n+httpApi :: Maybe IP4 -> HttpApi (AsServerT KatipController)\n+httpApi _ =\n+  HttpApi \n+  { _httpApiFile = toServant file\n+  , _httpApiAdmin = (`withBasicAuth` toServant . admin)\n+  , _httpApiAuth = toServant auth\n+  , _httpApiFront = toServant frontend\n+  , _httpApiUser =\n+      \\case\n+        Authenticated u -> toServant $ user u\n+        _ -> \n+          const $ \n+            throwError $ \n+              wwwAuthenticatedErr \n+              \"only for authorized personnel\" \n+  , _httpApiPublic = toServant public\n+  , _httpApiSendGrid = toServant sendgrid   \n+  }\n+\n+file :: FileApi (AsServerT KatipController)\n+file =\n+  FileApi\n+  { _fileApiUpload = \\bucket files ->\n+    flip logExceptionM ErrorS $\n+    katipAddNamespace\n+    (Namespace [\"file\", \"upload\"])\n+    (File.Upload.controller bucket files)\n+  , _fileApiPatch = \\fid file ->\n+    flip logExceptionM ErrorS $\n+    katipAddNamespace\n+    (Namespace [\"file\", \"patch\"])\n+    (File.Patch.controller fid file)\n+  , _fileApiDelete =\n+      flip logExceptionM ErrorS\n+    . katipAddNamespace\n+     (Namespace [\"file\", \"delete\"])\n+    . File.Delete.controller\n+  , _fileApiDownload = \\option fid w h ->\n+     flip logExceptionM ErrorS $\n+     katipAddNamespace\n+     (Namespace [\"file\", \"download\"])\n+     (File.Download.controller option fid w h) }\n+\n+admin :: User -> AdminApi (AsServerT KatipController)\n+admin _ = \n+  AdminApi {\n+    _adminApiTest = do\n+      ct <- currentTime\n+      runTelegram $location $ show [1, 2]\n+      runTelegram $location (show ct) $> Ok ct }\n+\n+auth :: AuthApi (AsServerT KatipController) \n+auth = \n+  AuthApi \n+  { _authApiAuthWithBasic = \\_ -> \n+    flip logExceptionM ErrorS $\n+     katipAddNamespace\n+    (Namespace [\"auth\", \"login\", \"basic\"]) \n+    (return $ Ok $ BasicAuth \"ZmNsYXcwMDdAZ21haWwuY29tOnRlc3Q=\") }\n+\n+frontend :: FrontendApi (AsServerT KatipController)\n+frontend = \n+  FrontendApi \n+  { _frontendApiLog = \\req -> \n+    flip logExceptionM ErrorS $\n+    katipAddNamespace\n+    (Namespace [\"frontend\", \"log\"]) \n+    (Frontend.Log.controller req) }\n+\n+user :: User -> UserApi (AsServerT KatipController) \n+user _ =\n+  UserApi \n+  { _userApiGetProfile = \\_ ->\n+    flip logExceptionM ErrorS $\n+    katipAddNamespace\n+    (Namespace [\"user\", \"profile\", \"get\"])\n+    undefined }\n+\n+public :: PublicApi (AsServerT KatipController)\n+public = \n+  PublicApi \n+  { _publicApiGetServerInfo = \n+     \\(conn :: WS.PendingConnection) ->\n+    flip logExceptionM ErrorS $\n+    katipAddNamespace\n+    (Namespace [\"public\", \"server\", \"info\"])\n+    (liftIO $ do\n+      c <- WS.acceptRequest conn\n+      WS.pingThread c 1 $ do \n+        let serverInfo = \n+              \"os: \" <> \n+              os <> \n+              \", arch:\" <> \n+              arch <> \n+              \", Haskell compiler: \" <> \n+              showVersion compilerVersion\n+        st <- getSystemTime\n+        let msg = serverInfo <> \", server time: \"  <> show (systemSeconds st)\n+        let resp = Ok [msg]\n+        WS.sendDataMessage c (WS.Text (Data.Aeson.encode resp) Nothing) ) }\n+\n+sendgrid :: SendGridApi  (AsServerT KatipController)\n+sendgrid = \n+  SendGridApi\n+  { _sendGridApiSendMail =\n+    flip logExceptionM ErrorS $\n+    katipAddNamespace\n+    (Namespace [\"sendgrid\", \"send\"])\n+    SendGrid.Send.controller }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686322827439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,161 +152,5 @@\n   { _sendGridApiSendMail =\n     flip logExceptionM ErrorS $\n     katipAddNamespace\n     (Namespace [\"sendgrid\", \"send\"])\n-    SendGrid.Send.controller }\n-{-# OPTIONS_GHC -fno-warn-unused-top-binds #-}\n-{-# LANGUAGE OverloadedStrings #-}\n-{-# LANGUAGE AllowAmbiguousTypes #-}\n-{-# LANGUAGE ScopedTypeVariables #-}\n-{-# LANGUAGE TypeApplications #-}\n-{-# LANGUAGE DataKinds #-}\n-{-# LANGUAGE FlexibleContexts #-}\n-{-# LANGUAGE TemplateHaskell #-}\n-{-# LANGUAGE QuasiQuotes #-}\n-{-# LANGUAGE LambdaCase #-}\n-\n-module Scaffold.Api.Controller.Controller (controller) where\n-\n-import Scaffold.Api\n--- controllers\n-import qualified Scaffold.Api.Controller.File.Upload as File.Upload\n-import qualified Scaffold.Api.Controller.File.Download as File.Download\n-import qualified Scaffold.Api.Controller.File.Delete as File.Delete\n-import qualified Scaffold.Api.Controller.File.Patch as File.Patch\n-import qualified Scaffold.Api.Controller.Frontend.Log as Frontend.Log\n-import qualified Scaffold.Api.Controller.SendGrid.SendMail as SendGrid.Send \n-import Servant.RawM.Server ()\n-import Scaffold.Auth\n-import Scaffold.Transport.Response\n-import Scaffold.Transport.Model.User (BasicAuth (..))\n-\n-import Data.Aeson\n-import Katip\n-import KatipController\n-import Servant.Server.Generic\n-import Servant.API.Generic\n-import Servant.Ip\n-import Control.Monad.Time\n-import BuildInfo\n-import Data.Functor\n-import Servant.Auth.Server (AuthResult (..), wwwAuthenticatedErr)\n-import Control.Monad.Except\n-import qualified Network.WebSockets.Connection as WS\n-import qualified Network.WebSockets as WS\n-import System.Info\n-import Data.Time.Clock.System (getSystemTime, systemSeconds)\n-import Data.Version (showVersion)\n-\n-\n-controller :: Api (AsServerT KatipController)\n-controller = Api { _apiHttp = toServant . httpApi  }\n-\n-httpApi :: Maybe IP4 -> HttpApi (AsServerT KatipController)\n-httpApi _ =\n-  HttpApi \n-  { _httpApiFile = toServant file\n-  , _httpApiAdmin = (`withBasicAuth` toServant . admin)\n-  , _httpApiAuth = toServant auth\n-  , _httpApiFront = toServant frontend\n-  , _httpApiUser =\n-      \\case\n-        Authenticated u -> toServant $ user u\n-        _ -> \n-          const $ \n-            throwError $ \n-              wwwAuthenticatedErr \n-              \"only for authorized personnel\" \n-  , _httpApiPublic = toServant public\n-  , _httpApiSendGrid = toServant sendgrid   \n-  }\n-\n-file :: FileApi (AsServerT KatipController)\n-file =\n-  FileApi\n-  { _fileApiUpload = \\bucket files ->\n-    flip logExceptionM ErrorS $\n-    katipAddNamespace\n-    (Namespace [\"file\", \"upload\"])\n-    (File.Upload.controller bucket files)\n-  , _fileApiPatch = \\fid file ->\n-    flip logExceptionM ErrorS $\n-    katipAddNamespace\n-    (Namespace [\"file\", \"patch\"])\n-    (File.Patch.controller fid file)\n-  , _fileApiDelete =\n-      flip logExceptionM ErrorS\n-    . katipAddNamespace\n-     (Namespace [\"file\", \"delete\"])\n-    . File.Delete.controller\n-  , _fileApiDownload = \\option fid w h ->\n-     flip logExceptionM ErrorS $\n-     katipAddNamespace\n-     (Namespace [\"file\", \"download\"])\n-     (File.Download.controller option fid w h) }\n-\n-admin :: User -> AdminApi (AsServerT KatipController)\n-admin _ = \n-  AdminApi {\n-    _adminApiTest = do\n-      ct <- currentTime\n-      runTelegram $location $ show [1, 2]\n-      runTelegram $location (show ct) $> Ok ct }\n-\n-auth :: AuthApi (AsServerT KatipController) \n-auth = \n-  AuthApi \n-  { _authApiAuthWithBasic = \\_ -> \n-    flip logExceptionM ErrorS $\n-     katipAddNamespace\n-    (Namespace [\"auth\", \"login\", \"basic\"]) \n-    (return $ Ok $ BasicAuth \"ZmNsYXcwMDdAZ21haWwuY29tOnRlc3Q=\") }\n-\n-frontend :: FrontendApi (AsServerT KatipController)\n-frontend = \n-  FrontendApi \n-  { _frontendApiLog = \\req -> \n-    flip logExceptionM ErrorS $\n-    katipAddNamespace\n-    (Namespace [\"frontend\", \"log\"]) \n-    (Frontend.Log.controller req) }\n-\n-user :: User -> UserApi (AsServerT KatipController) \n-user _ =\n-  UserApi \n-  { _userApiGetProfile = \\_ ->\n-    flip logExceptionM ErrorS $\n-    katipAddNamespace\n-    (Namespace [\"user\", \"profile\", \"get\"])\n-    undefined }\n-\n-public :: PublicApi (AsServerT KatipController)\n-public = \n-  PublicApi \n-  { _publicApiGetServerInfo = \n-     \\(conn :: WS.PendingConnection) ->\n-    flip logExceptionM ErrorS $\n-    katipAddNamespace\n-    (Namespace [\"public\", \"server\", \"info\"])\n-    (liftIO $ do\n-      c <- WS.acceptRequest conn\n-      WS.pingThread c 1 $ do \n-        let serverInfo = \n-              \"os: \" <> \n-              os <> \n-              \", arch:\" <> \n-              arch <> \n-              \", Haskell compiler: \" <> \n-              showVersion compilerVersion\n-        st <- getSystemTime\n-        let msg = serverInfo <> \", server time: \"  <> show (systemSeconds st)\n-        let resp = Ok [msg]\n-        WS.sendDataMessage c (WS.Text (Data.Aeson.encode resp) Nothing) ) }\n-\n-sendgrid :: SendGridApi  (AsServerT KatipController)\n-sendgrid = \n-  SendGridApi\n-  { _sendGridApiSendMail =\n-    flip logExceptionM ErrorS $\n-    katipAddNamespace\n-    (Namespace [\"sendgrid\", \"send\"])\n-    SendGrid.Send.controller }\n\\ No newline at end of file\n+    . SendGrid.Send.controller }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686322848818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,7 +150,7 @@\n sendgrid = \n   SendGridApi\n   { _sendGridApiSendMail =\n     flip logExceptionM ErrorS $\n-    katipAddNamespace\n+    . katipAddNamespace\n     (Namespace [\"sendgrid\", \"send\"])\n     . SendGrid.Send.controller }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686322860662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,8 +149,8 @@\n sendgrid :: SendGridApi  (AsServerT KatipController)\n sendgrid = \n   SendGridApi\n   { _sendGridApiSendMail =\n-    flip logExceptionM ErrorS $\n+    flip logExceptionM ErrorS\n     . katipAddNamespace\n     (Namespace [\"sendgrid\", \"send\"])\n     . SendGrid.Send.controller }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1686322805978,
            "name": "Commit-0",
            "content": "{-# OPTIONS_GHC -fno-warn-unused-top-binds #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE AllowAmbiguousTypes #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE TypeApplications #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE QuasiQuotes #-}\n{-# LANGUAGE LambdaCase #-}\n\nmodule Scaffold.Api.Controller.Controller (controller) where\n\nimport Scaffold.Api\n-- controllers\nimport qualified Scaffold.Api.Controller.File.Upload as File.Upload\nimport qualified Scaffold.Api.Controller.File.Download as File.Download\nimport qualified Scaffold.Api.Controller.File.Delete as File.Delete\nimport qualified Scaffold.Api.Controller.File.Patch as File.Patch\nimport qualified Scaffold.Api.Controller.Frontend.Log as Frontend.Log\nimport qualified Scaffold.Api.Controller.SendGrid.SendMail as SendGrid.Send \nimport Servant.RawM.Server ()\nimport Scaffold.Auth\nimport Scaffold.Transport.Response\nimport Scaffold.Transport.Model.User (BasicAuth (..))\n\nimport Data.Aeson\nimport Katip\nimport KatipController\nimport Servant.Server.Generic\nimport Servant.API.Generic\nimport Servant.Ip\nimport Control.Monad.Time\nimport BuildInfo\nimport Data.Functor\nimport Servant.Auth.Server (AuthResult (..), wwwAuthenticatedErr)\nimport Control.Monad.Except\nimport qualified Network.WebSockets.Connection as WS\nimport qualified Network.WebSockets as WS\nimport System.Info\nimport Data.Time.Clock.System (getSystemTime, systemSeconds)\nimport Data.Version (showVersion)\n\n\ncontroller :: Api (AsServerT KatipController)\ncontroller = Api { _apiHttp = toServant . httpApi  }\n\nhttpApi :: Maybe IP4 -> HttpApi (AsServerT KatipController)\nhttpApi _ =\n  HttpApi \n  { _httpApiFile = toServant file\n  , _httpApiAdmin = (`withBasicAuth` toServant . admin)\n  , _httpApiAuth = toServant auth\n  , _httpApiFront = toServant frontend\n  , _httpApiUser =\n      \\case\n        Authenticated u -> toServant $ user u\n        _ -> \n          const $ \n            throwError $ \n              wwwAuthenticatedErr \n              \"only for authorized personnel\" \n  , _httpApiPublic = toServant public\n  , _httpApiSendGrid = toServant sendgrid   \n  }\n\nfile :: FileApi (AsServerT KatipController)\nfile =\n  FileApi\n  { _fileApiUpload = \\bucket files ->\n    flip logExceptionM ErrorS $\n    katipAddNamespace\n    (Namespace [\"file\", \"upload\"])\n    (File.Upload.controller bucket files)\n  , _fileApiPatch = \\fid file ->\n    flip logExceptionM ErrorS $\n    katipAddNamespace\n    (Namespace [\"file\", \"patch\"])\n    (File.Patch.controller fid file)\n  , _fileApiDelete =\n      flip logExceptionM ErrorS\n    . katipAddNamespace\n     (Namespace [\"file\", \"delete\"])\n    . File.Delete.controller\n  , _fileApiDownload = \\option fid w h ->\n     flip logExceptionM ErrorS $\n     katipAddNamespace\n     (Namespace [\"file\", \"download\"])\n     (File.Download.controller option fid w h) }\n\nadmin :: User -> AdminApi (AsServerT KatipController)\nadmin _ = \n  AdminApi {\n    _adminApiTest = do\n      ct <- currentTime\n      runTelegram $location $ show [1, 2]\n      runTelegram $location (show ct) $> Ok ct }\n\nauth :: AuthApi (AsServerT KatipController) \nauth = \n  AuthApi \n  { _authApiAuthWithBasic = \\_ -> \n    flip logExceptionM ErrorS $\n     katipAddNamespace\n    (Namespace [\"auth\", \"login\", \"basic\"]) \n    (return $ Ok $ BasicAuth \"ZmNsYXcwMDdAZ21haWwuY29tOnRlc3Q=\") }\n\nfrontend :: FrontendApi (AsServerT KatipController)\nfrontend = \n  FrontendApi \n  { _frontendApiLog = \\req -> \n    flip logExceptionM ErrorS $\n    katipAddNamespace\n    (Namespace [\"frontend\", \"log\"]) \n    (Frontend.Log.controller req) }\n\nuser :: User -> UserApi (AsServerT KatipController) \nuser _ =\n  UserApi \n  { _userApiGetProfile = \\_ ->\n    flip logExceptionM ErrorS $\n    katipAddNamespace\n    (Namespace [\"user\", \"profile\", \"get\"])\n    undefined }\n\npublic :: PublicApi (AsServerT KatipController)\npublic = \n  PublicApi \n  { _publicApiGetServerInfo = \n     \\(conn :: WS.PendingConnection) ->\n    flip logExceptionM ErrorS $\n    katipAddNamespace\n    (Namespace [\"public\", \"server\", \"info\"])\n    (liftIO $ do\n      c <- WS.acceptRequest conn\n      WS.pingThread c 1 $ do \n        let serverInfo = \n              \"os: \" <> \n              os <> \n              \", arch:\" <> \n              arch <> \n              \", Haskell compiler: \" <> \n              showVersion compilerVersion\n        st <- getSystemTime\n        let msg = serverInfo <> \", server time: \"  <> show (systemSeconds st)\n        let resp = Ok [msg]\n        WS.sendDataMessage c (WS.Text (Data.Aeson.encode resp) Nothing) ) }\n\nsendgrid :: SendGridApi  (AsServerT KatipController)\nsendgrid = \n  SendGridApi\n  { _sendGridApiSendMail =\n    flip logExceptionM ErrorS $\n    katipAddNamespace\n    (Namespace [\"sendgrid\", \"send\"])\n    SendGrid.Send.controller }"
        }
    ]
}