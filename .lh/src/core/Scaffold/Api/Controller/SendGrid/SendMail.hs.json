{
    "sourceFile": "src/core/Scaffold/Api/Controller/SendGrid/SendMail.hs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1686322328690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1686322347292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,8 @@\n import KatipController\n import Data.Aeson hiding (Error)\n import Data.Aeson.Generic.DerivingVia\n import GHC.Exts\n-import Data.List (stripPrefix)\n-import Data.Typeable\n-import Data.Reflection (Reifies (..))\n-import Data.Maybe\n import qualified Data.Text as T\n \n newtype Email = Email T.Text\n   deriving stock Generic\n@@ -47,9 +43,9 @@\n data Request = \n      Request \n      { personalizations :: ![Personalization]\n      , from :: !Email\n-     ,  :: !T.Text\n+     , theme :: !T.Text\n      , body :: !T.Text \n      }\n     deriving stock Generic\n     deriving (ToJSON, FromJSON)\n"
                },
                {
                    "date": 1686322360528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+{-# LANGUAGE TypeApplications #-}\n+{-# LANGUAGE OverloadedStrings #-}\n+{-# LANGUAGE DataKinds #-}\n+{-# LANGUAGE TemplateHaskell #-}\n+{-# LANGUAGE DerivingStrategies #-}\n+{-# LANGUAGE DeriveAnyClass #-}\n+{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n+{-# LANGUAGE DeriveGeneric #-}\n+{-# LANGUAGE TypeApplications #-}\n+{-# LANGUAGE OverloadedStrings #-}\n+{-# LANGUAGE DerivingVia #-}\n+{-# LANGUAGE DataKinds #-}\n+{-# LANGUAGE ScopedTypeVariables #-}\n+{-# LANGUAGE FlexibleInstances #-}\n+{-# LANGUAGE MultiParamTypeClasses #-}\n+\n+module Scaffold.Api.Controller.SendGrid.SendMail (controller, Request) where\n+\n+import Scaffold.Transport.Response\n+\n+import KatipController\n+import Data.Aeson hiding (Error)\n+import Data.Aeson.Generic.DerivingVia\n+import GHC.Exts\n+import qualified Data.Text as T\n+import GHC.Generics\n+\n+newtype Email = Email T.Text\n+  deriving stock Generic\n+  deriving newtype (ToJSON, FromJSON)\n+\n+-- https://docs.sendgrid.com/for-developers/sending-email/personalizations\n+data Personalization = \n+     Personalization \n+     { to :: ![Email]\n+     , subject :: !T.Text\n+     } \n+  deriving stock Generic\n+  deriving (ToJSON, FromJSON)\n+     via WithOptions \n+     '[ FieldLabelModifier '[ UserDefined (StripConstructor Personalization)]] \n+     Personalization\n+\n+data Request = \n+     Request \n+     { personalizations :: ![Personalization]\n+     , from :: !Email\n+     , theme :: !T.Text\n+     , body :: !T.Text \n+     }\n+    deriving stock Generic\n+    deriving (ToJSON, FromJSON)\n+       via WithOptions \n+       '[ FieldLabelModifier '[ UserDefined (StripConstructor Request)]] \n+       Request\n+\n+controller :: Request -> KatipController (Response ())\n+controller = undefined\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686322412453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,63 +53,13 @@\n        via WithOptions \n        '[ FieldLabelModifier '[ UserDefined (StripConstructor Request)]] \n        Request\n \n-controller :: Request -> KatipController (Response ())\n-controller = undefined\n-{-# LANGUAGE TypeApplications #-}\n-{-# LANGUAGE OverloadedStrings #-}\n-{-# LANGUAGE DataKinds #-}\n-{-# LANGUAGE TemplateHaskell #-}\n-{-# LANGUAGE DerivingStrategies #-}\n-{-# LANGUAGE DeriveAnyClass #-}\n-{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n-{-# LANGUAGE DeriveGeneric #-}\n-{-# LANGUAGE TypeApplications #-}\n-{-# LANGUAGE OverloadedStrings #-}\n-{-# LANGUAGE DerivingVia #-}\n-{-# LANGUAGE DataKinds #-}\n-{-# LANGUAGE ScopedTypeVariables #-}\n-{-# LANGUAGE FlexibleInstances #-}\n-{-# LANGUAGE MultiParamTypeClasses #-}\n+instance ToSchema Request where\n+  declareNamedSchema _ = do\n+    textSchema <- declareSchemaRef (Proxy @T.Text)\n+    pure $ NamedSchema (Just \"Request(Frontend.Log)\") $ mempty\n+         & type_ ?~ SwaggerObject\n+         & properties .~ fromList [ (\"build\", textSchema), (\"msg\", textSchema) ]\n \n-module Scaffold.Api.Controller.SendGrid.SendMail (controller, Request) where\n-\n-import Scaffold.Transport.Response\n-\n-import KatipController\n-import Data.Aeson hiding (Error)\n-import Data.Aeson.Generic.DerivingVia\n-import GHC.Exts\n-import qualified Data.Text as T\n-\n-newtype Email = Email T.Text\n-  deriving stock Generic\n-  deriving newtype (ToJSON, FromJSON)\n-\n--- https://docs.sendgrid.com/for-developers/sending-email/personalizations\n-data Personalization = \n-     Personalization \n-     { to :: ![Email]\n-     , subject :: !T.Text\n-     } \n-  deriving stock Generic\n-  deriving (ToJSON, FromJSON)\n-     via WithOptions \n-     '[ FieldLabelModifier '[ UserDefined (StripConstructor Personalization)]] \n-     Personalization\n-\n-data Request = \n-     Request \n-     { personalizations :: ![Personalization]\n-     , from :: !Email\n-     , theme :: !T.Text\n-     , body :: !T.Text \n-     }\n-    deriving stock Generic\n-    deriving (ToJSON, FromJSON)\n-       via WithOptions \n-       '[ FieldLabelModifier '[ UserDefined (StripConstructor Request)]] \n-       Request\n-\n controller :: Request -> KatipController (Response ())\n controller = undefined\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686322434086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n \n newtype Email = Email T.Text\n   deriving stock Generic\n   deriving newtype (ToJSON, FromJSON)\n+  der\n \n -- https://docs.sendgrid.com/for-developers/sending-email/personalizations\n data Personalization = \n      Personalization \n"
                },
                {
                    "date": 1686322440641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n newtype Email = Email T.Text\n   deriving stock Generic\n   deriving newtype (ToJSON, FromJSON)\n-  der\n+  deriving ToSchema\n \n -- https://docs.sendgrid.com/for-developers/sending-email/personalizations\n data Personalization = \n      Personalization \n"
                },
                {
                    "date": 1686322470517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,13 +23,16 @@\n import Data.Aeson.Generic.DerivingVia\n import GHC.Exts\n import qualified Data.Text as T\n import GHC.Generics\n+import Data.Swagger hiding (Response)\n+import Control.Lens\n+import Data.Functor (($>))\n \n newtype Email = Email T.Text\n   deriving stock Generic\n   deriving newtype (ToJSON, FromJSON)\n-  deriving ToSchema\n+  deriving newtype ToSchema\n \n -- https://docs.sendgrid.com/for-developers/sending-email/personalizations\n data Personalization = \n      Personalization \n"
                },
                {
                    "date": 1686322475777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,13 +57,6 @@\n        via WithOptions \n        '[ FieldLabelModifier '[ UserDefined (StripConstructor Request)]] \n        Request\n \n-instance ToSchema Request where\n-  declareNamedSchema _ = do\n-    textSchema <- declareSchemaRef (Proxy @T.Text)\n-    pure $ NamedSchema (Just \"Request(Frontend.Log)\") $ mempty\n-         & type_ ?~ SwaggerObject\n-         & properties .~ fromList [ (\"build\", textSchema), (\"msg\", textSchema) ]\n-\n controller :: Request -> KatipController (Response ())\n controller = undefined\n\\ No newline at end of file\n"
                },
                {
                    "date": 1686322485642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,15 @@\n      via WithOptions \n      '[ FieldLabelModifier '[ UserDefined (StripConstructor Personalization)]] \n      Personalization\n \n+instance ToSchema Request where\n+  declareNamedSchema _ = do\n+    textSchema <- declareSchemaRef (Proxy @T.Text)\n+    pure $ NamedSchema (Just \"Request(Frontend.Log)\") $ mempty\n+         & type_ ?~ SwaggerObject\n+         & properties .~ fromList [ (\"build\", textSchema), (\"msg\", textSchema) ]\n+\n data Request = \n      Request \n      { personalizations :: ![Personalization]\n      , from :: !Email\n"
                },
                {
                    "date": 1686322494102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,9 @@\n \n instance ToSchema Request where\n   declareNamedSchema _ = do\n     textSchema <- declareSchemaRef (Proxy @T.Text)\n+    \n     pure $ NamedSchema (Just \"Request(Frontend.Log)\") $ mempty\n          & type_ ?~ SwaggerObject\n          & properties .~ fromList [ (\"build\", textSchema), (\"msg\", textSchema) ]\n \n"
                },
                {
                    "date": 1686322505426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \n instance ToSchema Request where\n   declareNamedSchema _ = do\n     textSchema <- declareSchemaRef (Proxy @T.Text)\n-    \n+    email \n     pure $ NamedSchema (Just \"Request(Frontend.Log)\") $ mempty\n          & type_ ?~ SwaggerObject\n          & properties .~ fromList [ (\"build\", textSchema), (\"msg\", textSchema) ]\n \n"
                },
                {
                    "date": 1686322513042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \n instance ToSchema Request where\n   declareNamedSchema _ = do\n     textSchema <- declareSchemaRef (Proxy @T.Text)\n-    email \n+    email <- declareSchemaRef (Proxy \n     pure $ NamedSchema (Just \"Request(Frontend.Log)\") $ mempty\n          & type_ ?~ SwaggerObject\n          & properties .~ fromList [ (\"build\", textSchema), (\"msg\", textSchema) ]\n \n"
                },
                {
                    "date": 1686322518627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \n instance ToSchema Request where\n   declareNamedSchema _ = do\n     textSchema <- declareSchemaRef (Proxy @T.Text)\n-    email <- declareSchemaRef (Proxy \n+    email <- declareSchemaRef (Proxy @Email)\n     pure $ NamedSchema (Just \"Request(Frontend.Log)\") $ mempty\n          & type_ ?~ SwaggerObject\n          & properties .~ fromList [ (\"build\", textSchema), (\"msg\", textSchema) ]\n \n"
                },
                {
                    "date": 1686322528984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n      via WithOptions \n      '[ FieldLabelModifier '[ UserDefined (StripConstructor Personalization)]] \n      Personalization\n \n-instance ToSchema Request where\n+instance ToSchema Personalization where\n   declareNamedSchema _ = do\n     textSchema <- declareSchemaRef (Proxy @T.Text)\n     email <- declareSchemaRef (Proxy @Email)\n     pure $ NamedSchema (Just \"Request(Frontend.Log)\") $ mempty\n"
                },
                {
                    "date": 1686322539597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n instance ToSchema Personalization where\n   declareNamedSchema _ = do\n     textSchema <- declareSchemaRef (Proxy @T.Text)\n     email <- declareSchemaRef (Proxy @Email)\n-    pure $ NamedSchema (Just \"Request(Frontend.Log)\") $ mempty\n+    pure $ NamedSchema (Just \"Personalization\") $ mempty\n          & type_ ?~ SwaggerObject\n          & properties .~ fromList [ (\"build\", textSchema), (\"msg\", textSchema) ]\n \n data Request = \n"
                },
                {
                    "date": 1686322547521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     textSchema <- declareSchemaRef (Proxy @T.Text)\n     email <- declareSchemaRef (Proxy @Email)\n     pure $ NamedSchema (Just \"Personalization\") $ mempty\n          & type_ ?~ SwaggerObject\n-         & properties .~ fromList [ (\"build\", textSchema), (\"msg\", textSchema) ]\n+         & properties .~ fromList [ (\"ro\", textSchema), (\"msg\", textSchema) ]\n \n data Request = \n      Request \n      { personalizations :: ![Personalization]\n"
                },
                {
                    "date": 1686322556348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,12 +47,12 @@\n \n instance ToSchema Personalization where\n   declareNamedSchema _ = do\n     textSchema <- declareSchemaRef (Proxy @T.Text)\n-    email <- declareSchemaRef (Proxy @Email)\n+    email <- declareSchemaRef (Proxy @[Email)\n     pure $ NamedSchema (Just \"Personalization\") $ mempty\n          & type_ ?~ SwaggerObject\n-         & properties .~ fromList [ (\"ro\", textSchema), (\"msg\", textSchema) ]\n+         & properties .~ fromList [ (\"to\", textSchema), (\"msg\", textSchema) ]\n \n data Request = \n      Request \n      { personalizations :: ![Personalization]\n"
                },
                {
                    "date": 1686322562899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \n instance ToSchema Personalization where\n   declareNamedSchema _ = do\n     textSchema <- declareSchemaRef (Proxy @T.Text)\n-    email <- declareSchemaRef (Proxy @[Email)\n+    email <- declareSchemaRef (Proxy @[Email])\n     pure $ NamedSchema (Just \"Personalization\") $ mempty\n          & type_ ?~ SwaggerObject\n          & properties .~ fromList [ (\"to\", textSchema), (\"msg\", textSchema) ]\n \n"
                },
                {
                    "date": 1686322576559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \n instance ToSchema Personalization where\n   declareNamedSchema _ = do\n     textSchema <- declareSchemaRef (Proxy @T.Text)\n-    email <- declareSchemaRef (Proxy @[Email])\n+    email <- declareSchemaRef (Proxy @[Email)\n     pure $ NamedSchema (Just \"Personalization\") $ mempty\n          & type_ ?~ SwaggerObject\n          & properties .~ fromList [ (\"to\", textSchema), (\"msg\", textSchema) ]\n \n"
                },
                {
                    "date": 1686322588812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \n instance ToSchema Personalization where\n   declareNamedSchema _ = do\n     textSchema <- declareSchemaRef (Proxy @T.Text)\n-    xs <- declareSchemaRef (Proxy @[Email])\n+    xsSc <- declareSchemaRef (Proxy @[Email])\n     pure $ NamedSchema (Just \"Personalization\") $ mempty\n          & type_ ?~ SwaggerObject\n          & properties .~ fromList [ (\"to\", textSchema), (\"msg\", textSchema) ]\n \n"
                },
                {
                    "date": 1686322599312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+{-# LANGUAGE TypeApplications #-}\n+{-# LANGUAGE OverloadedStrings #-}\n+{-# LANGUAGE DataKinds #-}\n+{-# LANGUAGE TemplateHaskell #-}\n+{-# LANGUAGE DerivingStrategies #-}\n+{-# LANGUAGE DeriveAnyClass #-}\n+{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n+{-# LANGUAGE DeriveGeneric #-}\n+{-# LANGUAGE TypeApplications #-}\n+{-# LANGUAGE OverloadedStrings #-}\n+{-# LANGUAGE DerivingVia #-}\n+{-# LANGUAGE DataKinds #-}\n+{-# LANGUAGE ScopedTypeVariables #-}\n+{-# LANGUAGE FlexibleInstances #-}\n+{-# LANGUAGE MultiParamTypeClasses #-}\n+\n+module Scaffold.Api.Controller.SendGrid.SendMail (controller, Request) where\n+\n+import Scaffold.Transport.Response\n+\n+import KatipController\n+import Data.Aeson hiding (Error)\n+import Data.Aeson.Generic.DerivingVia\n+import GHC.Exts\n+import qualified Data.Text as T\n+import GHC.Generics\n+import Data.Swagger hiding (Response)\n+import Control.Lens\n+import Data.Functor (($>))\n+\n+newtype Email = Email T.Text\n+  deriving stock Generic\n+  deriving newtype (ToJSON, FromJSON)\n+  deriving newtype ToSchema\n+\n+-- https://docs.sendgrid.com/for-developers/sending-email/personalizations\n+data Personalization = \n+     Personalization \n+     { to :: ![Email]\n+     , subject :: !T.Text\n+     } \n+  deriving stock Generic\n+  deriving (ToJSON, FromJSON)\n+     via WithOptions \n+     '[ FieldLabelModifier '[ UserDefined (StripConstructor Personalization)]] \n+     Personalization\n+\n+instance ToSchema Personalization where\n+  declareNamedSchema _ = do\n+    textSchema <- declareSchemaRef (Proxy @T.Text)\n+    xsSchema <- declareSchemaRef (Proxy @[Email])\n+    pure $ NamedSchema (Just \"Personalization\") $ mempty\n+         & type_ ?~ SwaggerObject\n+         & properties .~ fromList [ (\"to\", xsSchema), (\"msg\", textSchema) ]\n+\n+data Request = \n+     Request \n+     { personalizations :: ![Personalization]\n+     , from :: !Email\n+     , theme :: !T.Text\n+     , body :: !T.Text \n+     }\n+    deriving stock Generic\n+    deriving (ToJSON, FromJSON)\n+       via WithOptions \n+       '[ FieldLabelModifier '[ UserDefined (StripConstructor Request)]] \n+       Request\n+\n+controller :: Request -> KatipController (Response ())\n+controller = undefined\n\\ No newline at end of file\n"
                }
            ],
            "date": 1686322328690,
            "name": "Commit-0",
            "content": "{-# LANGUAGE TypeApplications #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE TemplateHaskell #-}\n{-# LANGUAGE DerivingStrategies #-}\n{-# LANGUAGE DeriveAnyClass #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE DeriveGeneric #-}\n{-# LANGUAGE TypeApplications #-}\n{-# LANGUAGE OverloadedStrings #-}\n{-# LANGUAGE DerivingVia #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n\nmodule Scaffold.Api.Controller.SendGrid.SendMail (controller, Request) where\n\nimport Scaffold.Transport.Response\n\nimport KatipController\nimport Data.Aeson hiding (Error)\nimport Data.Aeson.Generic.DerivingVia\nimport GHC.Exts\nimport Data.List (stripPrefix)\nimport Data.Typeable\nimport Data.Reflection (Reifies (..))\nimport Data.Maybe\nimport qualified Data.Text as T\n\nnewtype Email = Email T.Text\n  deriving stock Generic\n  deriving newtype (ToJSON, FromJSON)\n\n-- https://docs.sendgrid.com/for-developers/sending-email/personalizations\ndata Personalization = \n     Personalization \n     { to :: ![Email]\n     , subject :: !T.Text\n     } \n  deriving stock Generic\n  deriving (ToJSON, FromJSON)\n     via WithOptions \n     '[ FieldLabelModifier '[ UserDefined (StripConstructor Personalization)]] \n     Personalization\n\ndata Request = \n     Request \n     { personalizations :: ![Personalization]\n     , from :: !Email\n     ,  :: !T.Text\n     , body :: !T.Text \n     }\n    deriving stock Generic\n    deriving (ToJSON, FromJSON)\n       via WithOptions \n       '[ FieldLabelModifier '[ UserDefined (StripConstructor Request)]] \n       Request\n\ncontroller :: Request -> KatipController (Response ())\ncontroller = undefined"
        }
    ]
}